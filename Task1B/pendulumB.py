#python

###### GLOBAL VARIABLES HERE ######
base = None
motor = None 
arm = None
pendulum = None
U = None
x1 = None
x2 = None
x3 = None
x4 = None
# You can add variables here 
# as required by your implementation.
###################################

def sysCall_init():
    
    global base
    base = sim.getObjectHandle('Base_B')
    global arm
    arm = sim.getObjectHandle('Arm_B')
    global pendulum
    pendulum = sim.getObjectHandle('Pendulum_B')
    global pivot
    pivot = sim.getObjectHandle('Pivot_B')
    global motor
    motor = sim.getObjectHandle('Elbow_motor_B')
    global elbow
    elbow = sim.getObjectHandle('Elbow_free_B#1')
    

    
    # do some initialization here
    # This function will be executed once when the simulation starts
    
    ####### ADD YOUR CODE HERE ######
    # Hint: Initialize the scene objects which you will require 
    #       Initialize algorithm related variables here
    
    #################################
    pass

def sysCall_actuation():
    # put your actuation code here
    # This function will be executed at each simulation time step

    ####### ADD YOUR CODE HERE ######
    # Hint: Use the error feedback and apply control algorithm here
    #       Provide the resulting actuation as input to the actuator joint
    
    # Example psuedo code:

    x1, x2, x3, x4 = sysCall_sensing()
    
    #k = [-4.5350,  -1.0100,    -3.5000,    -10.4723]
    k = [-4.4350,  -10.0100,    -13.5000,    -10.4723]      # These gains will be generated by control algorithm. For ex: LQR, PID, etc.
    U = k[0]*x1 +k[1]*x2 +k[2]*x3 +k[3]*x4
    #print("U")
    #print(U)
    #print("1st element")
    #print (-k[0]*x1)
    #print("2nd element")
    #print (-k[1]*x2)
    #print("3rd element")
    #print (-k[2]*x3)
    #print("4th element")
    #print (-k[3]*x4)
    
    
    sim.setJointTargetVelocity(motor, U)

 

    
    #################################
    pass

def sysCall_sensing():
    
    # put your sensing code here
    # This function will be executed at each simulation time step
    x1 = 0 - sim.getJointPosition(pivot)
    x2 = 0 - sim.getJointVelocity(pivot)
    x3 = 0 - sim.getJointPosition(elbow)
    x4 = 0 - sim.getJointVelocity(elbow)
    
    print("1st element")
    print(x1)
    print("2nd element")
    print(x2)
    print("3rd element")
    print(x3)
    print("4th element")
    print(x4)
    
    
    ####### ADD YOUR CODE HERE ######
    # Hint: Take feedback here & do the error calculation
    
    #################################
    return x1, x2, x3, x4
    pass
    

def sysCall_cleanup():
    # do some clean-up here
    # This function will be executed when the simulation ends
    

    ####### ADD YOUR CODE HERE ######
    # Any cleanup (if required) to take the scene back to it's original state after simulation
    # It helps in case simulation fails in an unwanted state.
    #################################
    pass

# See the user manual or the available code snippets for additional callback functions and details
